*~
*.vo
*.vos
*.vok
*.glob
*.aux
*.vcd
*.vvp
*.v.timing
.coq-native
.depend
.lia.cache
.nia.cache
.coqdeps.d
Makefile.coq*
.Makefile*.coq*
\#*\#

*.out

.DS_Store

/bedrock2/special/stackloop
/bedrock2/special/stackloop.c
/bedrock2/special/stacknondet
/bedrock2/special/stacknondet.c
/bedrock2/special/TypecheckExprToCString.c

/processor/integration/program.hex

/end2end/admits.txt
/end2end/admits1perLine.txt

.vscode

# _CoqProject is generated by the Makefile
_CoqProject

__pycache__

# I like to put
#
# ((nil . ((compile-command . "if git rev-parse --is-inside-work-tree ; then cgexec -g memory:myMemGroup make all -C `git rev-parse --show-superproject-working-tree --show-toplevel | head -1` -j -k ; SAVED_EXIT_CODE=$? ; if test $SAVED_EXIT_CODE = 0 ; then notify-send 'make' 'compilation succeeded'; else notify-send 'make' 'compilation failed' ; exit $SAVED_EXIT_CODE ; fi ; else echo 'not sure what to do' ; fi"))))
#
# in my .dir-locals.el, but I don't want to force this setting on other users
#
# Also, someone might prefer a version without notify-send and parallel make:
#
# ((nil . ((compile-command . "if git rev-parse --is-inside-work-tree ; then nice -n 10 make all -C `git rev-parse --show-superproject-working-tree --show-toplevel | head -1` -k ; else echo 'not sure what to do' ; fi"))))
#
# Or using `nice` instead of `cgexec`:
# ((nil . ((compile-command . "if git rev-parse --is-inside-work-tree ; then nice -n 10 make all -C `git rev-parse --show-superproject-working-tree --show-toplevel | head -1` -j4 -k ; SAVED_EXIT_CODE=$? ; if test $SAVED_EXIT_CODE = 0 ; then notify-send 'make' 'compilation succeeded'; else notify-send 'make' 'compilation failed' ; exit $SAVED_EXIT_CODE ; fi ; else echo 'not sure what to do' ; fi"))))
#
/.dir-locals.el
